@page "/novels/delete/{id:int}"
@using Microsoft.EntityFrameworkCore
@using WebNovels.Data
@using WebNovels.Models
@inject ApplicationDbContext Db
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject IFileUploadService FileUploadService
@using Microsoft.AspNetCore.Authorization
@using WebNovels.Services
@attribute [Authorize]
@rendermode InteractiveServer

<h2>Delete Novel</h2>

@if (novel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="alert alert-danger">
        <p>Are you sure you want to delete the novel "<strong>@novel.Title</strong>"?</p>
        <button class="btn btn-danger" @onclick="Delete">Delete</button>
        <a class="btn btn-secondary ms-2" href="/novels">Cancel</a>
    </div>
}

@code {
    [Parameter] public int id { get; set; }
    private Novel novel;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var currentUserId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        novel = await Db.Novels.Include(n => n.Author).FirstOrDefaultAsync(n => n.Id == id);

        if (novel == null || novel.AuthorId != currentUserId)
        {
            Navigation.NavigateTo("/novels");
            return;
        }
    }

    private async Task Delete()
    {
        if (novel != null)
        {
            if (!string.IsNullOrEmpty(novel.CoverImagePath))
            {
                FileUploadService.DeleteFile(novel.CoverImagePath);
            }

            Db.Novels.Remove(novel);
            await Db.SaveChangesAsync();
            Navigation.NavigateTo("/novels");
        }
    }
}
