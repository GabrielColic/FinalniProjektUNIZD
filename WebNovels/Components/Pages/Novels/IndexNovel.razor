@page "/novels"

@using Microsoft.EntityFrameworkCore
@using WebNovels.Data
@using WebNovels.Models
@inject ApplicationDbContext Db
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@rendermode InteractiveServer

<h2>All Novels</h2>

<a class="btn btn-primary mb-3" href="/novels/create">Create New Novel</a>

@if (!string.IsNullOrWhiteSpace(searchQuery))
{
    <p>Showing results for: <strong>@searchQuery</strong></p>
}

@if (novels == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Cover Image</th>
                <th>Title</th>
                <th>Genres</th>
                <th>Author</th>
                <th>Created</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var novel in novels)
            {
                <tr>
                    <img src="@(!string.IsNullOrEmpty(novel.CoverImagePath) ? novel.CoverImagePath : "/images/default-cover.png")"
                         alt="Cover"
                         class="img-thumbnail"
                         style="width: 150px; height: 150px; object-fit: cover;" />
                    <td>@novel.Title</td>
                    <td>
                        @if (novel.Genres != null && novel.Genres.Any())
                        {
                            var topGenres = novel.Genres.Take(2).ToList();
                            foreach (var genre in topGenres)
                            {
                                <span class="badge bg-secondary me-1">@genre.Name</span>
                            }
                            if (novel.Genres.Count > 2)
                            {
                                <span class="badge bg-light text-muted">+@(@novel.Genres.Count - 2)</span>
                            }
                        }
                    </td>
                    <td>@novel.Author?.UserName</td>
                    <td>@novel.CreatedAt.ToShortDateString()</td>
                    <td>
                        <a href="/novels/details/@novel.Id">View</a>
                        @if (novel.AuthorId == currentUserId)
                        {
                            <text> | <a href="/novels/edit/@novel.Id">Edit</a> | <a href="/novels/delete/@novel.Id">Delete</a></text>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <Pagination TotalPages="@totalPages"
                CurrentPage="@currentPage"
                GoToPage="GoToPage" />
}

@code {
    [Parameter, SupplyParameterFromQuery] public string? search { get; set; }
    [Parameter, SupplyParameterFromQuery] public int? page { get; set; }

    private List<Novel> novels = new();
    private string searchQuery = "";
    private string currentUserId = "";
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages;

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        currentUserId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "";

        searchQuery = search ?? "";
        currentPage = page ?? 1;

        await LoadNovels();
    }

    private async Task LoadNovels()
    {
        IQueryable<Novel> query = Db.Novels
            .Include(n => n.Author)
            .Include(n => n.Genres);

        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            query = query.Where(n => n.Title.Contains(searchQuery));
        }

        var totalCount = await query.CountAsync();
        totalPages = (int)Math.Ceiling(totalCount / (double)pageSize);

        novels = await query
            .OrderByDescending(n => n.CreatedAt)
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToListAsync();
    }

    private void GoToPage(int pageNumber)
    {
        currentPage = pageNumber;

        var queryParams = new Dictionary<string, string>();

        if (!string.IsNullOrWhiteSpace(searchQuery))
            queryParams["search"] = searchQuery;

        queryParams["page"] = currentPage.ToString();

        var query = string.Join("&", queryParams.Select(kvp => $"{kvp.Key}={Uri.EscapeDataString(kvp.Value)}"));
        Navigation.NavigateTo($"/novels?{query}");
    }
}
