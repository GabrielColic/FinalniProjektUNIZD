@page "/novels"
@using Microsoft.EntityFrameworkCore
@using WebNovels.Data
@using WebNovels.Models
@inject ApplicationDbContext Db
@inject AuthenticationStateProvider AuthStateProvider
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@rendermode InteractiveServer

<h2>All Novels</h2>

<a class="btn btn-primary mb-3" href="/novels/create">Create New Novel</a>

@if (novels == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Author</th>
                <th>Created</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var novel in novels)
            {
                <tr>
                    <td>@novel.Title</td>
                    <td>@novel.Author?.UserName</td>
                    <td>@novel.CreatedAt.ToShortDateString()</td>
                    <td>
                        <a href="/novels/details/@novel.Id">View</a>
                        @if (novel.AuthorId == currentUserId)
                        {
                            <text> | <a href="/novels/edit/@novel.Id">Edit</a> | <a href="/novels/delete/@novel.Id">Delete</a></text>
                        }

                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (totalPages > 1)
    {
        <nav>
            <ul class="pagination">
                @for (int i = 1; i <= totalPages; i++)
                {
                    var pageNumber = i;
                    <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                        <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
                    </li>
                }
            </ul>
        </nav>
    }
}

@code {
    private List<Novel> novels;

    private string currentUserId;
    private int currentPage = 1;
    private int pageSize = 1;
    private int totalPages;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        currentUserId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        await LoadNovels();
    }

    private async Task LoadNovels()
    {
        var totalCount = await Db.Novels.CountAsync();
        totalPages = (int)Math.Ceiling(totalCount / (double)pageSize);

        novels = await Db.Novels
            .Include(n => n.Author)
            .OrderByDescending(n => n.CreatedAt)
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToListAsync();

        Console.WriteLine($"Loading page {currentPage} with page size {pageSize}");
    }
    private async Task GoToPage(int pageNumber)
    {
        currentPage = pageNumber;
        await LoadNovels();
    }
}
