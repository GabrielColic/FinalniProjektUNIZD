@page "/novels/edit/{id:int}"
@using WebNovels.Models
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using WebNovels.Services
@inject INovelService NovelService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@attribute [Authorize]
@rendermode InteractiveServer

<h2>Edit Novel</h2>

@if (novel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@novel" OnValidSubmit="HandleValidSubmit" FormName="EditNovelForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Title</label>
            <InputText class="form-control" @bind-Value="novel.Title" />
        </div>

        <div class="mb-3">
            <label>Genres</label>
            <GenreSelector SelectedGenreIds="@SelectedGenreIds"
                           SelectedGenreIdsChanged="@((ids) => SelectedGenreIds = ids)" />
        </div>

        <div class="mb-3">
            <label>Current Cover Image</label><br />
            <img src="@(!string.IsNullOrEmpty(novel.CoverImagePath) ? novel.CoverImagePath : "/images/default-cover.png")"
                 alt="Cover"
                 class="img-thumbnail"
                 style="width: 150px; height: 150px; object-fit: cover;" />
        </div>

        <div class="mb-3">
            <label>Change Cover Image</label>
            <InputFile OnChange="HandleImageUpload" />
        </div>

        <div class="mb-3">
            <label>Synopsis</label>
            <InputTextArea class="form-control" @bind-Value="novel.Synopsis" />
        </div>

        <button class="btn btn-success" type="submit">Save Changes</button>

        @if (!string.IsNullOrEmpty(validationError))
        {
            <div class="alert alert-danger">@validationError</div>
        }
    </EditForm>
}

@code {
    [Parameter] public int id { get; set; }
    private Novel? novel;
    private IBrowserFile? uploadedFile;
    private string? validationError;
    private List<int> SelectedGenreIds = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var currentUserId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (string.IsNullOrEmpty(currentUserId))
        {
            Navigation.NavigateTo("/novels");
            return;
        }

        novel = await NovelService.GetEditableNovelByIdAsync(id, currentUserId);

        if (novel == null)
        {
            Navigation.NavigateTo("/novels");
            return;
        }

        SelectedGenreIds = novel.Genres.Select(g => g.Id).ToList();
    }

    private void HandleImageUpload(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
    }

    private async Task HandleValidSubmit()
    {
        validationError = null;

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var currentUserId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (string.IsNullOrEmpty(currentUserId))
        {
            validationError = "User not authenticated.";
            return;
        }

        var success = await NovelService.UpdateNovelAsync(novel!, uploadedFile, SelectedGenreIds, currentUserId);

        if (!success)
        {
            validationError = "Failed to update the novel.";
            return;
        }

        Navigation.NavigateTo("/novels");
    }
}
