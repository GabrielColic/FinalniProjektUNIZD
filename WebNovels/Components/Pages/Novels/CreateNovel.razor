@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using WebNovels.Models
@using WebNovels.Services
@inject INovelService NovelService
@inject IFileUploadService FileUploadService
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation
@attribute [Authorize]

@page "/novels/create"
@rendermode InteractiveServer

<CascadingAuthenticationState>
    <EditForm Model="@novel" OnValidSubmit="HandleValidSubmit" FormName="CreateNovelForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Title</label>
            <InputText class="form-control" @bind-Value="novel.Title" />
        </div>

        <div class="mb-3">
            <label>Genres</label>
            <GenreSelector SelectedGenreIds="@SelectedGenreIds"
                           SelectedGenreIdsChanged="@((ids) => SelectedGenreIds = ids)" />
        </div>

        <div class="mb-3">
            <label>Cover Image</label>
            <InputFile OnChange="HandleImageUpload" />
        </div>

        <div class="mb-3">
            <label>Synopsis</label>
            <InputTextArea class="form-control" @bind-Value="novel.Synopsis" />
        </div>

        <button class="btn btn-success" type="submit">Save</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(validationError))
    {
        <div class="alert alert-danger">@validationError</div>
    }
</CascadingAuthenticationState>

@code {
    private Novel novel = new();
    private IBrowserFile? uploadedFile;
    private string? validationError;
    private List<int> SelectedGenreIds = new();

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;

    private void HandleImageUpload(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
    }

    private async Task HandleValidSubmit()
    {
        var authState = await AuthenticationStateTask;
        var user = await UserManager.GetUserAsync(authState.User);
        validationError = null;

        if (user == null)
        {
            validationError = "You must be logged in to create a novel.";
            return;
        }

        var (success, errorMessage) = await NovelService.CreateNovelAsync(novel, uploadedFile, SelectedGenreIds, user.Id);

        if (!success)
        {
            validationError = errorMessage;
            return;
        }

        Navigation.NavigateTo("/novels");
    }
}
