@page "/novels/details/{id:int}"
@using Microsoft.EntityFrameworkCore
@using WebNovels.Data
@using WebNovels.Models
@inject ApplicationDbContext Db
@inject AuthenticationStateProvider AuthStateProvider
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<h2>Novel Details</h2>

@if (novel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card p-3">
        <h4>@novel.Title</h4>
        <img src="@(!string.IsNullOrEmpty(novel.CoverImagePath) ? novel.CoverImagePath : "/images/default-cover.png")"
             alt="Cover"
             class="img-thumbnail"
             style="width: 150px; height: 150px; object-fit: cover;" />
        <p><strong>Synopsis:</strong> @novel.Synopsis</p>
        <p><strong>Author:</strong> @novel.Author?.UserName</p>
        <p><strong>Created At:</strong> @novel.CreatedAt.ToShortDateString()</p>

        @if (novel.AuthorId == currentUserId)
        {
            <a href="/novels/edit/@novel.Id" class="btn btn-primary me-2">Edit</a>
            <a href="/novels/delete/@novel.Id" class="btn btn-danger">Delete</a>
        }

    </div>
}

@code {
    [Parameter] public int id { get; set; }
    private Novel novel;
    private string currentUserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        currentUserId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        novel = await Db.Novels.Include(n => n.Author).FirstOrDefaultAsync(n => n.Id == id);
    }
}
