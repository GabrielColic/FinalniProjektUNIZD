@page "/chapters/create/{novelId:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using WebNovels.Models
@using WebNovels.Data
@using WebNovels.Services
@using Blazored.TextEditor
@inject ApplicationDbContext Db
@inject IChapterService ChapterService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject IContentParserService ContentParserService
@attribute [Authorize]
@rendermode InteractiveServer

@if (isUnauthorized)
{
    <div class="alert alert-danger">You are not authorized to add chapters to this novel.</div>
}
else if (chapter != null)
{
    <EditForm Model="@chapter" OnSubmit="HandleSubmit" FormName="CreateChapterForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Title</label>
            <InputText class="form-control" @bind-Value="chapter.Title" />
            <ValidationMessage For="@(() => chapter.Title)" />
        </div>

        <div class="mb-3">
            <small class="text-muted">Max file size: 10MB. Supported formats: .md (recommended), .docx</small>
            <InputFile OnChange="HandleFileUpload" accept=".md,.docx" />
            @if (!string.IsNullOrEmpty(fileUploadStatus))
            {
                <div class="text-info mt-1">@fileUploadStatus</div>
            }
        </div>

        <div class="mb-3">
            <label class="form-label">Or Enter Content Manually</label>
            <div class="p-2">
                <BlazoredTextEditor @ref="textEditor" EditorCssStyle="height: 400px;">
                    <ToolbarContent>
                        <select class="ql-header">
                            <option selected></option>
                            <option value="1"></option>
                            <option value="2"></option>
                            <option value="3"></option>
                            <option value="4"></option>
                            <option value="5"></option>
                        </select>
                        <span class="ql-formats">
                            <button class="ql-bold"></button>
                            <button class="ql-italic"></button>
                            <button class="ql-underline"></button>
                            <button class="ql-strike"></button>
                        </span>
                        <span class="ql-formats">
                            <select class="ql-color"></select>
                            <select class="ql-background"></select>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-list" value="ordered"></button>
                            <button class="ql-list" value="bullet"></button>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-link"></button>
                        </span>
                    </ToolbarContent>
                </BlazoredTextEditor>
            </div>

            @if (!string.IsNullOrWhiteSpace(validationError))
            {
                <div class="text-danger mt-1">@validationError</div>
            }
        </div>

        <div class="mb-3">
            <label>Order</label>
            <InputNumber class="form-control" @bind-Value="chapter.Order" />
        </div>

        <div class="form-check">
            <InputCheckbox class="form-check-input" @bind-Value="chapter.IsPublished" />
            <label class="form-check-label">Published</label>
        </div>

        <button class="btn btn-primary" type="submit">Save Chapter</button>
    </EditForm>
}

@code {
    [Parameter] public int novelId { get; set; }

    private Chapter? chapter;
    private Novel? novel;
    private string? validationError;
    private bool isUnauthorized = false;
    private BlazoredTextEditor? textEditor;

    private IBrowserFile? uploadedFile;
    private string? uploadedContent;
    private string? fileUploadStatus;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);
        var currentUserId = user?.Id;

        novel = await Db.Novels.FindAsync(novelId);

        if (novel == null || novel.AuthorId != currentUserId)
        {
            isUnauthorized = true;
            return;
        }

        var nextOrder = await Db.Chapters
            .Where(c => c.NovelId == novelId)
            .CountAsync() + 1;

        chapter = new Chapter
        {
            NovelId = novelId,
            Title = "",
            Content = "",
            Order = nextOrder,
            IsPublished = true
        };
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
        try
        {
            uploadedContent = await ContentParserService.ParseAsync(uploadedFile);
            fileUploadStatus = $"File '{uploadedFile.Name}' uploaded and parsed successfully.";
        }
        catch (Exception ex)
        {
            uploadedContent = null;
            fileUploadStatus = $"Failed to parse file: {ex.Message}";
        }
    }

    private async Task HandleSubmit(EditContext editContext)
    {
        if (chapter == null) return;

        var isValid = editContext.Validate();
        if (!isValid) return;

        if (!string.IsNullOrWhiteSpace(uploadedContent))
        {
            chapter.Content = uploadedContent;
        }
        else
        {
            chapter.Content = await textEditor.GetHTML();
        }

        if (string.IsNullOrWhiteSpace(chapter.Content) || chapter.Content == "<p><br></p>")
        {
            validationError = "The Content field is required.";
            return;
        }

        validationError = null;

        await ChapterService.SaveChapterAsync(chapter);
        Navigation.NavigateTo($"/novels/details/{novelId}");
    }
}
