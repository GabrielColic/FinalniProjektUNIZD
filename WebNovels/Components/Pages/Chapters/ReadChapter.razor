@page "/chapters/read/{id:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using WebNovels.Models
@using WebNovels.Services
@using WebNovels.Services.BookmarkServices
@using WebNovels.Services.ChapterServices
@using WebNovels.Components.Pages.Shared
@using System.Threading
@using WebNovels.Services.NovelServices
@inject IChapterService ChapterService
@inject ICommentService CommentService
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation
@inject IBookmarkService BookmarkService
@inject INovelService NovelService
@inject WebNovels.Data.ApplicationDbContext Db
@attribute [Authorize]
@rendermode InteractiveServer

<style>
    .chapter-content p {
        margin: 0 0 0.5rem 0;
        line-height: 1.6;
    }
</style>

@if (isBlocked)
{
    <div class="alert alert-danger mt-4">
        You are not authorized to view this chapter.
    </div>
}
else if (chapter == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <!-- Title and reader controls -->
    <div class="d-flex justify-content-between align-items-center">
        <div class="d-flex align-items-center gap-2">
            <h2 class="mb-0">@chapter.Title</h2>
            <button class="btn btn-sm"
                    style="padding: 0.25rem 0.5rem; color: @(isBookmarked ? "#ffc107" : "#6c757d");"
                    title="@(isBookmarked ? "Remove Bookmark" : "Bookmark Chapter")"
                    @onclick="ToggleBookmark">
                <i class="bi @(isBookmarked ? "bi-bookmark-star-fill" : "bi-bookmark-star") fs-4"></i>
            </button>
        </div>
        <div class="d-flex align-items-center gap-3">
            <div class="d-flex align-items-center">
                <label class="me-2 mb-0">Font Size:</label>
                <select @onchange="OnFontSizeChanged" class="form-select form-select-sm" style="width: auto;" value="@fontSize">
                    <option value="1rem">Small</option>
                    <option value="1.1rem">Default</option>
                    <option value="1.3rem">Large</option>
                    <option value="1.5rem">Extra Large</option>
                </select>
            </div>
            <div class="d-flex align-items-center">
                <label class="me-2 mb-0">Font Type:</label>
                <select @onchange="OnFontFamilyChanged" class="form-select form-select-sm" style="width: auto;" value="@fontFamily">
                    <option value="Georgia, serif">Georgia</option>
                    <option value="Times New Roman, serif">Times New Roman</option>
                    <option value="Arial, sans-serif">Arial</option>
                    <option value="Verdana, sans-serif">Verdana</option>
                    <option value="Courier New, monospace">Courier New</option>
                </select>
            </div>
        </div>
    </div>

    <p class="text-muted">Published on @chapter.PublishedAt.ToShortDateString()</p>

    <!-- Chapter Content -->
    <div class="mt-4 d-flex justify-content-center">
        <div class="chapter-content"
             style="
                            max-width: 1000px;
                            width: 100%;
                            padding: 0 1rem;
                            font-size:@fontSize;
                            font-family:@fontFamily;
                            text-align: justify;
                            color: #2e2e2e;">
            @((MarkupString)chapter.Content)
        </div>
    </div>

    <!-- Navigation Buttons -->
    @if (previousChapter != null || nextChapter != null)
    {
        <div class="d-flex justify-content-between mt-4">
            @if (previousChapter != null)
            {
                <a class="btn btn-primary mb-5" href="/chapters/read/@previousChapter.Id">
                    ← @previousChapter.Title
                </a>
            }

            <div></div>

            @if (nextChapter != null)
            {
                <a class="btn btn-primary mb-5" href="/chapters/read/@nextChapter.Id">
                    @nextChapter.Title →
                </a>
            }
        </div>
    }

    <!-- Comments Section -->
    <hr class="mt-5" />
    <h5>Comments</h5>

    @if (comments == null)
    {
        <p><em>Loading comments...</em></p>
    }
    else
    {
        @if (!comments.Any())
        {
            <p class="text-muted">No comments yet. Be the first to comment!</p>
        }
        else
        {
            @foreach (var c in comments)
            {
                <div class="border rounded p-2 mb-2">
                    <strong>@c.User.UserName</strong>
                    <span class="text-muted" style="font-size: 0.8rem;"> • @c.CreatedAt.ToLocalTime().ToString("g")</span>

                    @if (editingCommentId == c.Id)
                    {
                        <textarea class="form-control my-2" @bind="editContent" rows="3"></textarea>
                        <div class="d-flex gap-2">
                            <button class="btn btn-sm btn-success" @onclick="() => SaveEditedComment(c.Id)">Save</button>
                            <button class="btn btn-sm btn-secondary" @onclick="CancelEdit">Cancel</button>
                        </div>
                    }
                    else
                    {
                        <p class="mb-1">@c.Content</p>

                        @if (IsUserAuthor(c.UserId))
                        {
                            <div class="d-flex gap-2">
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => StartEditingComment(c.Id, c.Content)">Edit</button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteComment(c.Id)">Delete</button>
                            </div>
                        }
                    }
                </div>
            }
        }

        <div class="mt-3 pb-5">
            <textarea class="form-control mb-2" @bind="newComment" placeholder="Write a comment..." rows="3"></textarea>
            <button class="btn btn-primary btn-sm" @onclick="SubmitComment">Post Comment</button>
        </div>
    }

    <Confirm Title="Delete Comment"
               Message="Are you sure you want to delete this comment?"
               Show="@showDeleteDialog"
               OnConfirm="ConfirmDelete"
               OnCancel="CancelDelete" />
}

@code {
    [Parameter] public int id { get; set; }

    private Chapter? chapter;
    private Chapter? previousChapter;
    private Chapter? nextChapter;
    private bool isBlocked = false;

    private string fontSize = "1.1rem";
    private string fontFamily = "Georgia, serif";

    private List<Comment>? comments;
    private string newComment = string.Empty;
    private int? editingCommentId = null;
    private string editContent = string.Empty;
    private string? currentUserId;

    private bool showDeleteDialog = false;
    private int? pendingDeleteCommentId = null;

    private bool isBookmarked = false;

    private bool _isLoadingChapter = false;


    // protected override async Task OnInitializedAsync()
    // {
    //     var authState = await AuthStateProvider.GetAuthenticationStateAsync();
    //     var user = await UserManager.GetUserAsync(authState.User);
    //     currentUserId = user?.Id;

    //     if (user != null)
    //     {
    //         fontSize = user.PreferredFontSize ?? fontSize;
    //         fontFamily = user.PreferredFontFamily ?? fontFamily;
    //     }

    //     chapter = await ChapterService.GetChapterByIdAsync(id);

    //     if (chapter == null)
    //     {
    //         isBlocked = true;
    //         return;
    //     }

    //     var isAuthor = chapter.Novel?.AuthorId == currentUserId;

    //     if (!chapter.IsPublished && !isAuthor)
    //     {
    //         isBlocked = true;
    //         return;
    //     }

    //     var visibleChapters = await ChapterService.GetAllVisibleChapters(chapter.NovelId, isAuthor);

    //     var currentIndex = visibleChapters.FindIndex(c => c.Id == chapter.Id);
    //     if (currentIndex > 0) previousChapter = visibleChapters[currentIndex - 1];
    //     if (currentIndex < visibleChapters.Count - 1) nextChapter = visibleChapters[currentIndex + 1];

    //     comments = await CommentService.GetCommentsForChapterAsync(chapter.Id);

    //     if (user != null)
    //     {
    //         isBookmarked = await BookmarkService.IsChapterBookmarkedAsync(user.Id, chapter.Id);
    //     }

    //     if (chapter != null && !string.IsNullOrEmpty(currentUserId))
    //     {
    //         await BookmarkService.SetBookmarkAsync(currentUserId, chapter.NovelId, chapter.Id);
    //     }

    // }

    protected override async Task OnParametersSetAsync() => await LoadChapterAsync();

    private async Task LoadChapterAsync()
    {
        if (_isLoadingChapter) return;
        _isLoadingChapter = true;

        try
        {
            isBlocked = false;
            previousChapter = null;
            nextChapter = null;

            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authState.User);
            currentUserId = user?.Id;

            if (user != null)
            {
                fontSize = user.PreferredFontSize ?? fontSize;
                fontFamily = user.PreferredFontFamily ?? fontFamily;
            }

            chapter = await ChapterService.GetChapterByIdAsync(id);
            if (chapter == null) { isBlocked = true; return; }

            var isAuthor = chapter.Novel?.AuthorId == currentUserId;
            if (!chapter.IsPublished && !isAuthor) { isBlocked = true; return; }

            if (!isAuthor && !string.IsNullOrEmpty(currentUserId))
            {
                var today = DateOnly.FromDateTime(DateTime.UtcNow);
                await NovelService.RecordChapterViewAsync(currentUserId, chapter.NovelId, chapter.Id, today);
            }


            var visibleChapters = await ChapterService.GetAllVisibleChapters(chapter.NovelId, isAuthor);
            var currentIndex = visibleChapters.FindIndex(c => c.Id == chapter.Id);
            if (currentIndex > 0) previousChapter = visibleChapters[currentIndex - 1];
            if (currentIndex < visibleChapters.Count - 1) nextChapter = visibleChapters[currentIndex + 1];

            comments = await CommentService.GetCommentsForChapterAsync(chapter.Id);

            if (currentUserId != null)
            {
                isBookmarked = await BookmarkService.IsChapterBookmarkedAsync(currentUserId, chapter.Id);
                await BookmarkService.SetBookmarkAsync(currentUserId, chapter.NovelId, chapter.Id);
            }
        }
        finally
        {
            _isLoadingChapter = false;
        }
    }


    private async Task OnFontSizeChanged(ChangeEventArgs e)
    {
        fontSize = e.Value?.ToString() ?? "1.1rem";
        await SaveUserPreferencesAsync();
    }

    private async Task OnFontFamilyChanged(ChangeEventArgs e)
    {
        fontFamily = e.Value?.ToString() ?? "Georgia, serif";
        await SaveUserPreferencesAsync();
    }

    private async Task SaveUserPreferencesAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        if (user != null)
        {
            user.PreferredFontSize = fontSize;
            user.PreferredFontFamily = fontFamily;
            await UserManager.UpdateAsync(user);
        }
    }

    private async Task SubmitComment()
    {
        if (string.IsNullOrWhiteSpace(newComment)) return;

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        if (user == null || chapter == null) return;

        await CommentService.AddCommentAsync(user.Id, chapter.Id, newComment);
        newComment = string.Empty;

        comments = await CommentService.GetCommentsForChapterAsync(chapter.Id);
    }

    private bool IsUserAuthor(string userId)
    {
        return userId == currentUserId;
    }

    private void StartEditingComment(int commentId, string content)
    {
        editingCommentId = commentId;
        editContent = content;
    }

    private void CancelEdit()
    {
        editingCommentId = null;
        editContent = string.Empty;
    }

    private async Task SaveEditedComment(int commentId)
    {
        await CommentService.UpdateCommentAsync(commentId, currentUserId!, editContent);
        editingCommentId = null;
        editContent = string.Empty;
        comments = await CommentService.GetCommentsForChapterAsync(chapter!.Id);
    }

    private void DeleteComment(int commentId)
    {
        pendingDeleteCommentId = commentId;
        showDeleteDialog = true;
    }

    private async Task ConfirmDelete()
    {
        if (pendingDeleteCommentId.HasValue)
        {
            await CommentService.DeleteCommentAsync(pendingDeleteCommentId.Value, currentUserId!);
            comments = await CommentService.GetCommentsForChapterAsync(chapter!.Id);
        }

        showDeleteDialog = false;
        pendingDeleteCommentId = null;
    }

    private void CancelDelete()
    {
        showDeleteDialog = false;
        pendingDeleteCommentId = null;
    }

    private async Task ToggleBookmark()
    {
        if (chapter == null || string.IsNullOrEmpty(currentUserId))
            return;

        if (isBookmarked)
        {
            await BookmarkService.RemoveBookmarkAsync(currentUserId, chapter.Id);
        }
        else
        {
            await BookmarkService.SetBookmarkAsync(currentUserId, chapter.NovelId, chapter.Id);
        }

        isBookmarked = !isBookmarked;
    }

}

