@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using WebNovels.Services.DesignServices
@implements IDisposable
@inject NavigationManager Navigation
@inject IThemeService ThemeService
@rendermode InteractiveServer

<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">

        <a class="navbar-brand" href="">
            <i class="bi bi-bookshelf me-1"></i> WebRomani
        </a>

        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarNav">
            <AuthorizeView>
                <Authorized>

                    <!-- Left side -->
                    <div class="d-flex align-items-center gap-3">
                        <a class="btn btn-outline-light" href="#" @onclick="ClearSearch">
                            <i class="bi bi-book-half me-1"></i> Novels
                        </a>
                        <NavLink class="btn btn-outline-light" href="/novels/search">
                            <i class="bi bi-funnel me-1"></i> Advanced Search
                        </NavLink>
                    </div>

                    <!-- Right side -->
                    <div class="d-flex ms-auto align-items-center gap-3">
                        <form class="d-flex" @onsubmit="PerformSearch">
                            <InputText class="form-control me-2" placeholder="Search novels..." @bind-Value="searchQuery" />
                            <button class="btn btn-outline-light" type="submit">Search</button>
                        </form>

                        <a class="btn btn-outline-light" href="/bookmarks">
                            <i class="bi bi-bookmark-star me-1"></i> Bookmarks
                        </a>

                        <div class="dropdown">
                            <a class="btn btn-outline-light dropdown-toggle" href="#" id="accountDropdown" role="button"
                               data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="bi bi-person-circle me-1"></i> @context.User.Identity?.Name
                            </a>
                            <ul class="dropdown-menu dropdown-menu-end dropdown-menu-dark" aria-labelledby="accountDropdown">
                                <li>
                                    <a class="dropdown-item d-flex align-items-center gap-0" href="Account/Manage">
                                        <i class="bi bi-gear"></i>
                                        <span>Manage Account</span>
                                    </a>
                                </li>

                                <li class="dropdown-item d-flex align-items-center gap-3 justify-content-between">
                                    <i class="bi bi-brightness-high"></i>
                                    <div class="form-check form-switch m-0">
                                        <input class="form-check-input" type="checkbox" role="switch" id="themeSwitch" @onchange="ToggleTheme" checked="@isDark">
                                    </div>
                                    <i class="bi bi-moon ms-2" style="margin-left: 2px;"></i>
                                </li>

                                <li>
                                    <form action="Account/Logout" method="post" class="dropdown-item d-flex align-items-center gap-3 m-0 p-0">
                                        <AntiforgeryToken />
                                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                                        <button type="submit" class="dropdown-item d-flex align-items-center gap-3 w-100">
                                            <i class="bi bi-box-arrow-right"></i>
                                            <span>Logout</span>
                                        </button>
                                    </form>
                                </li>

                            </ul>
                        </div>
                    </div>
                </Authorized>

                <NotAuthorized>
                    <ul class="navbar-nav ms-auto">
                        <li class="nav-item">
                            <NavLink class="btn btn-outline-light" href="Account/Register">
                                <i class="bi bi-person-plus"></i> Register
                            </NavLink>
                        </li>
                        <li class="nav-item">
                            <NavLink class="btn btn-outline-light" href="Account/Login">
                                <i class="bi bi-box-arrow-in-right"></i> Login
                            </NavLink>
                        </li>
                    </ul>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>
</nav>

@code {
    private string? currentUrl;
    private string searchQuery = "";
    private bool isDark;

    protected override void OnInitialized()
    {
        currentUrl = Navigation.ToBaseRelativePath(Navigation.Uri);
        Navigation.LocationChanged += OnLocationChanged;
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = Navigation.ToBaseRelativePath(e.Location);
        var theme = await ThemeService.GetCurrentThemeAsync();
        isDark = theme == "dark";
        StateHasChanged();
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
    }

    private void PerformSearch()
    {
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            Navigation.NavigateTo($"/novels?search={Uri.EscapeDataString(searchQuery)}");
        }
    }

    private void ClearSearch()
    {
        searchQuery = string.Empty;
        Navigation.NavigateTo("/novels", forceLoad: true);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var theme = await ThemeService.GetCurrentThemeAsync();
        isDark = theme == "dark";
        await ThemeService.ApplyInitialThemeAsync();
        StateHasChanged();
    }


    private async Task ToggleTheme()
    {
        isDark = await ThemeService.ToggleThemeAsync();
    }
}
